name: Build and Push cli2rest-varna-tz image

on:
  schedule:
    # Run daily at 1:00 UTC
    - cron: '0 1 * * *'
  workflow_dispatch:  # Allow manual triggering
  pull_request:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest varna-tz tag
        id: get_varna_version
        run: |
          LATEST_TAG=$(git ls-remote --tags --sort="v:refname" https://github.com/tzok/varna-tz.git | tail -n1 | sed 's/.*\///; s/\^{}//')
          echo "Latest varna-tz tag: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get latest svgcleaner tag
        id: get_svgcleaner_version
        run: |
          # Fetch tags, filter for 'v' prefix, sort by version, get the last one, extract the tag name, remove 'v' prefix
          LATEST_TAG_WITH_V=$(git ls-remote --tags --sort="v:refname" https://github.com/RazrFalcon/svgcleaner.git 'v*' | tail -n1 | sed 's/.*\///; s/\^{}//')
          LATEST_TAG=${LATEST_TAG_WITH_V#v} # Remove 'v' prefix
          echo "Latest svgcleaner tag (with v): $LATEST_TAG_WITH_V"
          echo "Latest svgcleaner tag (without v): $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./varna-tz
          # Pass the fetched tags as build arguments
          build-args: |
            VARNA_TZ_VERSION=${{ steps.get_varna_version.outputs.version }}
            SVGCLEANER_VERSION=${{ steps.get_svgcleaner_version.outputs.version }}
          push: ${{ github.event_name != 'pull_request' }}
          load: true
          tags: |
            cli2rest-varna-tz:test
            ghcr.io/tzok/cli2rest-varna-tz:latest
            ghcr.io/tzok/cli2rest-varna-tz:${{ github.sha }}
            ghcr.io/tzok/cli2rest-varna-tz:${{ steps.get_varna_version.outputs.version }}_${{ steps.get_svgcleaner_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --name cli2rest-varna-tz-test -d -p 8000 cli2rest-varna-tz:test
          sleep 5 # Wait for container to start
          HOST_PORT=$(docker port cli2rest-varna-tz-test 8000 | cut -d: -f2)
          curl -s "http://localhost:$HOST_PORT/health" | grep '"status":"healthy"'

          pip install .
          cat > example.json << 'EOF'
          {
            "drawingAlgorithm": "NAVIEW",
            "nucleotides": [
              { "id": 1, "number": 1, "char": "C", "outlineColor": "red" },
              { "id": 2, "number": 2, "char": "A", "innerColor": "red" },
              { "id": 3, "number": 10, "char": "G" },
              { "id": 4, "number": 11, "char": "A", "nameColor": "red" },
              { "id": 5, "number": 12, "char": "A" },
              { "id": 6, "number": 13, "char": "A" },
              { "id": 7, "number": 14, "char": "U" },
              { "id": 8, "number": 15, "char": "G" }
            ],
            "basePairs": [
              { "id1": 1, "id2": 8, "stericity": "CIS", "edge5": "WC", "edge3": "WC", "canonical": true, "color": "red" },
              { "id1": 2, "id2": 7, "stericity": "CIS", "edge5": "WC", "edge3": "WC", "canonical": true, "color": "#FF00FF", "thickness": 40.0 },
              { "id1": 3, "id2": 6, "stericity": "TRANS", "edge5": "WC", "edge3": "SUGAR", "canonical": false, "color": "green", "thickness": 2.0 }
            ],
            "stackings": [
              { "id1": 1, "id2": 7 }
            ]
          }
          EOF

          cli2rest-bio --api-url http://localhost:$HOST_PORT src/cli2rest_bio/configs/varna-tz/config.yaml example.json

          for f in varna-tz-example-clean.svg varna-tz-example-stdout.txt varna-tz-example-stderr.txt; do
            if [ ! -f "$f" ]; then
              echo "Test failed: Output file $f is missing."
              ls -l
              exit 1
            fi
          done
          echo "Test passed: All output files created."

          docker stop cli2rest-varna-tz-test
